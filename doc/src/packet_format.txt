[[chapter-format]]
== Packet format and bitrate budget ==

The Sapphire telemetry is a continuous stream of packetized data. The data comes from the GNC and AAU units and packed into the frame structure described here. When neither GNC nor AAU are transmitting data, the transmitter will fill out the empty slots using own telemetry. This will ensure that the receiver can stay locked and synchronized to the signal even when there is no telemetry from the payload.

The Sapphire telemetry system uses a very simple packet format shown on the figure below:

[[figure-packet-struct]]
.The Sapphire packet structure
image::images/packet_structure.png["Sapphire telemetry packet structure", scaledwidth="85%"]

A packet consists of the following parts:

* A fixed length packet header (11 bytes)
* Variable length data field (up to 255 bytes)
* CRC for the data field (2 bytes)
* FEC field that applies to parts of the header (last 5 bytes), the data field and the CRC

=== Packet header ===

[[figure-packet-header]]
.Sapphire telemetry packet header
image::images/packet_header.png["Sapphire telemetry packet header", scaledwidth="85%"]

The packet header contains the following fields:

1. A 4 byte PREAMBLE field consisting of alternating 0 and 1. The preamble is used for training the clock recovery in the receiver.
2. A 4 byte SYNC field containing the pattern 0x374FE2DA. The SYNC field is used by the correlator in the receiver to identify a packet.
3. A 1 byte LENGTH field specifying the number of bytes in the data field.
4. Another 1 byte length field but this time the "inverse" (255-LENGTH).
5. A one byte SOURCE field specifying the origin of the packet. This information is used by the data distribution system in mission control to route the packets to their respective users. Following values are valid:
** 0x00: TX1
** 0x01: TX2
** 0x11: AAU
** 0x12: GNC


=== Data field ===

.Sapphire telemetry data field
image::images/packet_data_field.png["Sapphire telemetry data field", scaledwidth="100%"]

The data field contains the data as received from the payload. There are two types of payload data as indicated on the figure above. They are terminated with carriage return and linefeed characters 0x0D0A indicating packet end. The transmitter interprets this as a "flush the buffer" command even if 0x0D0A occurs inside the data. In practice this may lead to fragmentation of payload packets; however, this is not expected to cause any problems at the receiving end.

A third type of packet contains telemetry from the transmitter itself. These packets are used to fill out empty slots that are not used by the payload. See xref:section-bitrate[] for details.

The transmitter packets contain the transmitter uptime in 1/10th of a second and two raw ADC readings corresponding to the supply voltage and the temperature inside the PIC24.

=== CRC field ===

A 16-bit CRC is added to each packet in order to allow verifying correct packet reception. The CRC is generated using the programmable CRC generator in the PIC24 using the polynomial x^16^+x^12^+x^5^+1.

=== FEC field ===

.FEC frame
image::images/packet_fec.png["Sapphire telemetry FEC frame", scaledwidth="100%"]

FEC is applied to all fields except the PREAMBLE and SYNC fields in the header. A FEC frame is thus 5 + N bytes long, where N is the length of the data field. Since we are using convolutional code we do not really have separate data and FEC fields as suggested by the figure. Instead, each byte is encoded as soon as it arrives and the coded data is put into the output buffer.

[[section-bitrate]]
=== Downlink budget ===

In the present configuration we have 250 kbps at our disposal. We apply rate 1/2 FEC to the data, thus we have 125 kbps at our disposal. xref:table-budget[] below shows the downlink budget under these circumstances. As can be seen from the table, almost half of the traffic is transmitter telemetry to fill out empty slots, thus there is plenty of room for future increase in data rate.

[[table-budget]]
.Bitrate budget
[width="80%",frame="topbot",options="header,footer"]
|======================
| Source | Packet size [bytes/pkt] | Packet overhead [bytes/pkt] | Packet length [bits/pkt] | Packet rate [pkt/sec] | Bitrate [bps]
| GNC | 80 | 12 | 736 | 102.25 | 75255.62
| AAU | 48 | 12 | 480 | 20.00  | 9600.00
| TX  | 10 | 12 | 176 | 198.00 | 34848.00
| Total | | | | | 119.70 k
|======================
